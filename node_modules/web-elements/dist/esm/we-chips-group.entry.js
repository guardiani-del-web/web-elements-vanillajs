import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-57b84139.js';

const ChipsGroup = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.children = [];
        this.chipsGroupCallback = createEvent(this, "chipsGroupCallback", 7);
    }
    removeCallbackHandler(prop) {
        const { value } = prop.detail;
        const getRemovedIndex = this.children.findIndex((item) => item.value === value);
        if (getRemovedIndex >= 0) {
            this.children.splice(getRemovedIndex, 1);
        }
        this.chipsGroupCallback.emit({ value: this.value, children: this.children });
    }
    selectCallbackHandler(prop) {
        const { value, isSelected } = prop.detail;
        this.children.forEach((child) => {
            if (child['value'] === value)
                child['isSelected'] = isSelected;
        });
        this.chipsGroupCallback.emit({ value: this.value, children: this.children });
    }
    componentDidLoad() {
        const items = this.el.querySelectorAll(':scope > we-chips');
        items.forEach((i) => {
            const child = {};
            const value = i.getAttribute('value');
            child['value'] = value;
            child['isSelected'] = false;
            this.children.push(child);
        });
    }
    render() {
        return (h(Host, null, h("slot", null)));
    }
    get el() { return getElement(this); }
    static get style() { return ":host{display:var(--display, flex);-ms-flex-pack:var(--justify-content, unset);justify-content:var(--justify-content, unset);-ms-flex-align:var(--align-items, unset);align-items:var(--align-items, unset);-ms-flex-direction:var(--flex-direction, row);flex-direction:var(--flex-direction, row)}"; }
};

export { ChipsGroup as we_chips_group };
