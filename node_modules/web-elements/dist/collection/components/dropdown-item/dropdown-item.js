import { Host, h } from "@stencil/core";
export class DropdownItem {
    constructor() {
        this.arrowState = this.arrow;
        this.style = {};
        /** In which position you want put children relative to the parent dropdown item: right, left, bottom, top <br> Choosen the position you can also modify the css variables that define the position*/
        this.positionChildren = 'right';
    }
    manageTransition() {
        if (this.width) {
            this.widthArray = JSON.parse(this.width);
            this.style['width'] = this.childrenOpen ? this.widthArray[1] : this.widthArray[0];
        }
        else
            this.style['width'] = 'auto';
        if (this.height) {
            this.heightArray = JSON.parse(this.height);
            this.style['height'] = this.childrenOpen ? this.heightArray[1] : this.heightArray[0];
        }
        else
            this.style['height'] = 'auto';
    }
    componentWillLoad() {
        this.style['overflow'] = 'hidden';
        if (this.arrow) {
            const arrowArray = JSON.parse(this.arrow);
            this.arrowState = arrowArray[0];
        }
        this.manageTransition();
    }
    handleChangeState() {
        if (this.arrow) {
            const arrowArray = JSON.parse(this.arrow);
            this.arrowState = this.arrowState == arrowArray[0] ? arrowArray[1] : arrowArray[0];
        }
        this.childrenOpen = !this.childrenOpen;
        this.manageTransition();
        if (this.style['overflow'] === 'hidden') {
            setTimeout(() => {
                if (this.childrenOpen === true)
                    this.style['overflow'] = 'unset';
            }, 500);
        }
        else
            this.style['overflow'] = 'hidden';
    }
    handleItemClicked(event) {
        this.clickItemCallback.emit(event.target.value);
    }
    render() {
        return (h(Host, null,
            h("div", { class: 'dropdown_item ' + this.borderClass, onClick: this.handleItemClicked.bind(this) },
                this.label ? h("label", null, this.label) : h("slot", { name: "item_content" }),
                this.arrow && (h("div", { class: "arrowContainer", onClick: () => this.handleChangeState() },
                    h("i", { class: 'arrow ' + this.arrowState })))),
            h("div", { class: 'children position_' + this.positionChildren, style: {
                    width: this.style['width'],
                    height: this.style['height'],
                    overflow: this.style['overflow']
                } },
                h("slot", null))));
    }
    static get is() { return "we-dropdown-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["dropdown-item.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["dropdown-item.css"]
    }; }
    static get properties() { return {
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Text inside the dropdown item if you want to use a simple dropdown item with only text"
            },
            "attribute": "label",
            "reflect": false
        },
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Value put in payload of event triggered when dropdown item is clicked"
            },
            "attribute": "value",
            "reflect": false
        },
        "arrow": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Arrow direction when dropdown is opened/closed inserted in this way: [\"arrow_closed\",\"arrow_opened\"], values accepted: right, left, up, down"
            },
            "attribute": "arrow",
            "reflect": false
        },
        "width": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Width of the children container when is opened/closed, insert it if you want a transition of width in this way: [\"width_close\", \"width_open\"], usually the width_close is 0"
            },
            "attribute": "width",
            "reflect": false
        },
        "height": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Height of the children container when is opened/closed, insert it if you want a transition of height in this way: [\"height_close\", \"height_open\"], usually the height_close is 0"
            },
            "attribute": "height",
            "reflect": false
        },
        "positionChildren": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "In which position you want put children relative to the parent dropdown item: right, left, bottom, top <br> Choosen the position you can also modify the css variables that define the position"
            },
            "attribute": "position-children",
            "reflect": false,
            "defaultValue": "'right'"
        },
        "borderClass": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Prop update from dropdown group depend on the orientation the dropdown item is put in order to draw a line separation between them"
            },
            "attribute": "border-class",
            "reflect": false
        }
    }; }
    static get states() { return {
        "arrowState": {},
        "childrenOpen": {},
        "widthArray": {},
        "heightArray": {},
        "style": {}
    }; }
    static get events() { return [{
            "method": "clickItemCallback",
            "name": "clickItemCallback",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event triggered when dropdown item is clicked, not the arrow"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
}
