import { Host, h } from "@stencil/core";
import { generateUniqueId } from '@utils';
/**
 * @slot header - Slot for the title
 * @slot content - Slot for the content
 */
export class Tab {
    constructor() {
        this.valueId = generateUniqueId();
    }
    handleChange(event) {
        this.tabCallback.emit(event.target.value);
    }
    render() {
        return (h(Host, { "data-id": this.valueId },
            h("input", { type: "radio", id: "wetab", name: "tab", checked: this.enabled, value: this.valueId, onChange: this.handleChange.bind(this) }),
            h("label", { htmlFor: "wetab" },
                h("slot", { name: "header" })),
            h("slot", { name: "content" })));
    }
    static get is() { return "we-tab"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["tab.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["tab.css"]
    }; }
    static get properties() { return {
        "enabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Default value of tab (opened/closed) when component is triggered the first time"
            },
            "attribute": "enabled",
            "reflect": false
        }
    }; }
    static get states() { return {
        "valueId": {}
    }; }
    static get events() { return [{
            "method": "tabCallback",
            "name": "tabCallback",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event triggered when user select a tab putting in the payload the value id generated"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
}
