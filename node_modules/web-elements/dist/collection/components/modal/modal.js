import { Host, h } from "@stencil/core";
export class Modal {
    handleClose(event) {
        this.isVisible = false;
        this.modalCallback.emit(event);
    }
    render() {
        const classVisible = this.isVisible ? 'visible' : '';
        return (h(Host, null,
            h("div", { class: classVisible + ' back', onClick: this.handleClose.bind(this) },
                h("div", { class: "modal" },
                    h("slot", null)))));
    }
    static get is() { return "we-modal"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["modal.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["modal.css"]
    }; }
    static get properties() { return {
        "isVisible": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "identify if modal is visible or not"
            },
            "attribute": "is-visible",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "modalCallback",
            "name": "modalCallback",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Event triggered when the visibility of modal change"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
}
