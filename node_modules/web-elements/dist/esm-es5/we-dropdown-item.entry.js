import { r as registerInstance, c as createEvent, h, H as Host } from './index-57b84139.js';
var DropdownItem = /** @class */ (function () {
    function DropdownItem(hostRef) {
        registerInstance(this, hostRef);
        this.arrowState = this.arrow;
        this.style = {};
        /** In which position you want put children relative to the parent dropdown item: right, left, bottom, top <br> Choosen the position you can also modify the css variables that define the position*/
        this.positionChildren = 'right';
        this.clickItemCallback = createEvent(this, "clickItemCallback", 7);
    }
    DropdownItem.prototype.manageTransition = function () {
        if (this.width) {
            this.widthArray = JSON.parse(this.width);
            this.style['width'] = this.childrenOpen ? this.widthArray[1] : this.widthArray[0];
        }
        else
            this.style['width'] = 'auto';
        if (this.height) {
            this.heightArray = JSON.parse(this.height);
            this.style['height'] = this.childrenOpen ? this.heightArray[1] : this.heightArray[0];
        }
        else
            this.style['height'] = 'auto';
    };
    DropdownItem.prototype.componentWillLoad = function () {
        this.style['overflow'] = 'hidden';
        if (this.arrow) {
            var arrowArray = JSON.parse(this.arrow);
            this.arrowState = arrowArray[0];
        }
        this.manageTransition();
    };
    DropdownItem.prototype.handleChangeState = function () {
        var _this = this;
        if (this.arrow) {
            var arrowArray = JSON.parse(this.arrow);
            this.arrowState = this.arrowState == arrowArray[0] ? arrowArray[1] : arrowArray[0];
        }
        this.childrenOpen = !this.childrenOpen;
        this.manageTransition();
        if (this.style['overflow'] === 'hidden') {
            setTimeout(function () {
                if (_this.childrenOpen === true)
                    _this.style['overflow'] = 'unset';
            }, 500);
        }
        else
            this.style['overflow'] = 'hidden';
    };
    DropdownItem.prototype.handleItemClicked = function (event) {
        this.clickItemCallback.emit(event.target.value);
    };
    DropdownItem.prototype.render = function () {
        var _this = this;
        return (h(Host, null, h("div", { class: 'dropdown_item ' + this.borderClass, onClick: this.handleItemClicked.bind(this) }, this.label ? h("label", null, this.label) : h("slot", { name: "item_content" }), this.arrow && (h("div", { class: "arrowContainer", onClick: function () { return _this.handleChangeState(); } }, h("i", { class: 'arrow ' + this.arrowState })))), h("div", { class: 'children position_' + this.positionChildren, style: {
                width: this.style['width'],
                height: this.style['height'],
                overflow: this.style['overflow']
            } }, h("slot", null))));
    };
    Object.defineProperty(DropdownItem, "style", {
        get: function () { return ":host{display:block;position:relative;cursor:var(--cursor, pointer)}:host .dropdown_item{display:var(--display, flex);width:var(--width, 12.5em);height:var(--height, 1.875em);background:var(--background, white);color:var(--color, black);padding:var(--padding, 0.625em);margin:var(--margin, 0);-ms-flex-pack:var(--justify-content, space-between);justify-content:var(--justify-content, space-between);-ms-flex-align:var(--align-items, center);align-items:var(--align-items, center)}:host .dropdown_item.border_right{border-right:var(--border-right, solid 0.125em black)}:host .dropdown_item.border_bottom{border-bottom:var(--border-bottom, solid 0.125em black)}:host .dropdown_item:hover{background:var(--background-hover, #b9b9b9)}:host .dropdown_item label{pointer-events:none}:host .dropdown_item .arrow{border:var(--arrow--border, solid black);padding:var(--arrow--padding, 0.1875em);border-width:var(--arrow--border-width, 0 0.1875em 0.1875em 0);display:var(--arrow--display, inline-block);-webkit-transition:var(--arrow--transition, all 0.5s);transition:var(--arrow--transition, all 0.5s)}:host .dropdown_item .arrow.right{transform:rotate(-45deg);-webkit-transform:rotate(-45deg)}:host .dropdown_item .arrow.left{transform:rotate(135deg);-webkit-transform:rotate(135deg)}:host .dropdown_item .arrow.up{transform:rotate(-135deg);-webkit-transform:rotate(-135deg)}:host .dropdown_item .arrow.down{transform:rotate(45deg);-webkit-transform:rotate(45deg)}:host .children{position:var(--children--position, absolute);-webkit-transition:var(--children--transition, all 0.5s);transition:var(--children--transition, all 0.5s);z-index:2}:host .children.position_right{top:var(--children--top, -0.125em);left:var(--children--left, 100%)}:host .children.position_bottom{top:var(--children--top, 100%);left:var(--children--left, -0.125em)}:host .children.position_left{top:var(--children--top, -0.125em);right:var(--children--right, 100%)}:host .children.position_top{bottom:var(--children--bottom, 100%);left:var(--children--left, -0.125em)}"; },
        enumerable: true,
        configurable: true
    });
    return DropdownItem;
}());
export { DropdownItem as we_dropdown_item };
